// MIXINS
@mixin after($afterTop:0, $afterLeft:0, $afterWidth:100%, $afterHeight:100%) {
	content:"";
	width:$afterWidth;
	height:$afterHeight;
	position:absolute;
	top:$afterTop;
	left:$afterLeft;
}
@mixin fontFace($fontFamily: $customFontFamily, $fontFile: $customFontFile, $fontFileSVG: $customFontFileSVG) {
	font-family: '#{$fontFamily}';
	src: url('fonts/#{$fontFile}.eot');
	src: local('#'),
		 url('fonts/#{$fontFile}.eot?#iefix') format('embedded-opentype'),
		 url('fonts/#{$fontFile}.woff') format('woff'),
		 url('fonts/#{$fontFile}.ttf') format('truetype'),
		 url('fonts/#{$fontFile}.svgz##{$fontFileSVG}') format('svg'),
		 url('fonts/#{$fontFile}.svg##{$fontFileSVG}') format('svg');
	font-weight: normal;
	font-style: normal;
	-webkit-font-smoothing: antialiased;
	text-rendering:optimizelegibility;
}
@mixin iconFont($fontFamily: $customIconFontFamily, $fontFile: $customIconFontFile) {
	font-family: '#{$fontFamily}';
	src: url('fonts/#{$fontFile}.eot');
	src: url('fonts/#{$fontFile}.eot?#iefix') format('embedded-opentype'),
		 url('fonts/#{$fontFile}.woff') format('woff'),
		 url('fonts/#{$fontFile}.ttf') format('truetype'),
		 url('fonts/#{$fontFile}.svg##{$fontFamily}') format('svg');
	font-weight: normal;
	font-style: normal;
	-webkit-font-smoothing: antialiased;
	text-rendering:optimizelegibility;
}
@mixin customFont($fontSize:1em, $lineHeight:1.5em, $color:#fff) {
	font-family: $customFontFamily, $font_family;
	font-size: $fontSize;
	font-weight:normal;
	line-height: $lineHeight;
	color: $color;
	font-style: normal;
	-webkit-font-smoothing: antialiased;
	text-rendering:optimizelegibility;
}
@mixin customPtn($ptnOpacity: 0.42, $ptnImage:'ptn.png', $ptnIEOpacity: 0.1) {
	position: relative;
	z-index: 0;

	&:before {
		@include after;
		@include opacity($ptnOpacity);
		background: image-url('#{$ptnImage}') repeat;
		z-index:-1;
			
		.lt-ie9 & {
			@include opacity($ptnIEOpacity);
		}
	}
}
@mixin button(
		$btnColor: 'red',
		$btnFontSize:1.125em,
		$btnCorners: 3px, 
		$btnPadding: 0 0.5em,
		$btnTextShadDir:-1px, 
		$btnTextShadBlur: 0, 
		$btnBorder:rgb(0,0,0),
		$btnShadowTop: rgba(white,0.2),
		$btnShadowBottom: rgba(black,0.25),
		$btnGradStart:rgb(182,0,1),
		$btnGradEnd:rgb(208,19,27),
		$btnText:rgb(255,255,255),
		$btnTextHover: $gold_border,
		$btnTextShadColor:rgba(black,0.5)
	) {
	@if $btnColor == 'gold' {
		$btnGradStart:rgb(209,176,95);
		$btnGradEnd:rgb(235,202,121);
		$btnText:rgb(144,28,28);
		$btnTextHover: darken(rgb(144,28,28), 5%);
		$btnTextShadColor:rgba(249,246,240,0.35);
	}
	@else if $btnColor == 'grey' {
		$btnGradStart:rgb(190,190,190);
		$btnGradEnd:rgb(200,200,200);
		$btnText:rgb(62,62,62);
		$btnTextHover: darken(rgb(62,62,62), 5%);
		$btnTextShadColor:rgba(255,255,255,0.35);
	}
	@include transition(color $transition-speed ease-in-out, background $transition-speed ease-in-out);
	background-color: $btnGradStart; // Old browsers
	@include background(linear-gradient(to top right, $btnGradStart, $btnGradEnd));
	@include box-shadow($btnShadowTop 0 1px 0 0 inset, $btnShadowBottom 0 1px 0 0);
	@include box-sizing(border-box);
	@include border-radius($btnCorners);
	@include text-shadow($btnTextShadDir $btnTextShadDir $btnTextShadBlur $btnTextShadColor);
	width: auto;
	height: auto;
	display: inline-block;
	font-family: $customFontFamily;
	font-size: $btnFontSize;
	line-height: 40px;
	color: $btnText;
	padding: $btnPadding;
	border: 0;
	position: relative;

	> span {
		padding: 0;
	}
	&:before {
		@include text-shadow($btnTextShadDir $btnTextShadDir $btnTextShadBlur $btnTextShadColor);
		position: relative;
		top: 2px;
	}
	&:visited {
		color: $btnText;
	}
	&:hover, &:active, &:focus {
		color: $btnTextHover;
		border: 0;
		background-color: lighten($btnGradStart,5%);
		@include background-image(linear-gradient(to top right, lighten($btnGradStart, 5%) 0%, lighten($btnGradEnd, 5%) 100%));
		@include box-shadow($btnShadowTop 0 1px 0 0 inset, $btnShadowBottom 0 1px 0 0);
	}
	// under 480px
	@media all and (max-width: 30em) {
		width: 100%;
		text-align: center;
		padding: 0;
	}
}
@mixin button_color(
		$btnColor: 'red',
		$btnGradStart: rgb(182,0,1),
		$btnGradEnd: rgb(208,19,27),
		$btnText: rgb(255,255,255),
		$btnTextHover: $gold_border,
		$btnTextShadColor: rgba(black,0.5),
		$btnTextShadDir:-1px, 
		$btnTextShadBlur: 0
	) {
	@if $btnColor == 'gold' {
		$btnGradStart: rgb(209,176,95);
		$btnGradEnd: rgb(235,202,121);
		$btnText: rgb(144,28,28);
		$btnTextHover: darken(rgb(144,28,28), 5%);
		$btnTextShadColor: rgba(249,246,240,0.35);
	}
	@else if $btnColor == 'grey' {
		$btnGradStart: rgb(190,190,190);
		$btnGradEnd: rgb(200,200,200);
		$btnText: rgb(62,62,62);
		$btnTextHover: darken(rgb(62,62,62), 5%);
		$btnTextShadColor: rgba(255,255,255,0.35);
	}
	background-color: $btnGradStart; // Old browsers
	@include background(linear-gradient(to top right, $btnGradStart, $btnGradEnd));
	color: $btnText;
	@include text-shadow($btnTextShadDir $btnTextShadDir $btnTextShadBlur $btnTextShadColor);
	
	&:before {
		@include text-shadow($btnTextShadDir $btnTextShadDir $btnTextShadBlur $btnTextShadColor);
	}
	&:visited {
		color: $btnText;
	}
	&:hover, &:active, &:focus {
		color: $btnTextHover;
		background-color: lighten($btnGradStart,5%); // Old browsers
		@include background(linear-gradient(to top right, lighten($btnGradStart, 5%) 0%, lighten($btnGradEnd, 5%) 100%));
	}
}
%listHover {
	$darkenAmount: 5%;
	background:darken(rgb(250,242,238), $darkenAmount);
}
@mixin goldGradient($diag: false, $darken:false, $darkenAmount:5%, $btnGradStart:rgb(214,188,120), $btnGradMiddle:rgb(212,175,98), $btnGradEnd:rgb(200,150,69)) {
	@include box-shadow(rgba(107,58,25,0.5) 0 1px 0 inset, rgba(white,0.3) 0 2px 0 inset);
	background: $btnGradMiddle;
	@if $diag {
		@if $darken {
			@include background(linear-gradient(to bottom, darken($btnGradStart, $darkenAmount), darken($btnGradMiddle, $darkenAmount), darken($btnGradEnd, $darkenAmount)));
		} @else {
			@include background(linear-gradient(to bottom, $btnGradStart, $btnGradMiddle, $btnGradEnd));
		}
	} @else {
		@if $darken {
			@include background(linear-gradient(to bottom, darken($btnGradStart, $darkenAmount), darken($btnGradMiddle, $darkenAmount), darken($btnGradEnd, $darkenAmount)));
		} @else {
			@include background(linear-gradient(to bottom, $btnGradStart, $btnGradMiddle, $btnGradEnd));
		}
	}
}
@mixin clearfix {
	&:after, &:before {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
	& {
		*zoom: 1;
	}
}

// author: Chris Coyier
// url: http://css-tricks.com/conditional-media-query-mixins/?utm_source=Responsive+Design+Weekly&utm_campaign=4397db3874-Responsive_Design_Weekly_82&utm_medium=email&utm_term=0_df65b6d7c8-4397db3874-58972189
@mixin bp($point) {
	$bp-mob_port: "(max-width: 30em)";
	$bp-mob_land: "(min-width: 30em)";
	$bp-tab_port: "(min-width: 48em)";
	$bp-tab_land: "(min-width: 64em)";
	$bp-desktop: "(min-width: 80em)";
	$bp-retina: "(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5)";
	$bp-portrait: "(orientation:portrait)";
	$bp-landscape: "(orientation:landscape)";

	@if $point == mobile-portrait {
		@media #{$bp-mob_port} { @content; }
	}
	@else if $point == mobile-landscape {
		@media #{$bp-mob_land} { @content; }
	}
	@else if $point == tablet-portrait {
		@media #{$bp-tab_port}  { @content; }
	}
	@else if $point == tablet-landscape {
		@media #{$bp-tab_land}  { @content; }
	}
	@else if $point == desktop {
		@media #{$bp-desktop}  { @content; }
	}
	@else if $point == retina {
		@media #{$bp-retina}  { @content; }
	}
	@else if $point == portrait {
		@media #{$bp-portrait}  { @content; }
	}
	@else if $point == landscape {
		@media #{$bp-landscape}  { @content; }
	}
}